# application.properties (for the Quartz microservice on port 8585)
server.port=8686
spring.application.name=HotelChatBox
logging.level.com.hotel.chatbox.service.JwtUtil=DEBUG


# JWT Configuration
jwt.secret=vCjJ4hgHab31JevoGggLRG0UBwtH1kstsRhEIk0g/BKaa0eHjb7X/I9kBEnGDCANpBIgBmhylpPF3A88V82nYg==
# 24 hours in milliseconds (24 * 60 * 60 * 1000)
jwt.expiration=86400000

# ############################################################################################
# --- 1. Primary PostgreSQL Database Configuration ---
# ############################################################################################

spring.datasource.url=jdbc:postgresql://localhost:5432/HotelChatBot
spring.datasource.username=hotel
spring.datasource.password=hotel

# ############################################################################################
# --- 2. JPA and Hibernate Configuration ---
# ############################################################################################

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
# Optional: Formats SQL logs for better readability
spring.jpa.format-sql=true
# Controls schema generation (update, create, create-drop, validate, none)
spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.ddl-auto=create-drop
# Often needed for large object handling
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# ############################################################################################
# --- 3. Spring AI PGvector Vector Store Configuration ---
# ############################################################################################

# Set to 'true' to auto-create the vector_store table if it doesn't exist
spring.ai.vectorstore.pgvector.initialize-schema=true
## Set to 'true' to let Spring AI create the necessary table and extension (if not exists)
## Be cautious in production: you might prefer to manage schema migrations manually (e.g., Flyway, Liquibase)

# Set to 'true' to drop and recreate the table on startup (USE WITH CAUTION IN PROD!)      
spring.ai.vectorstore.pgvector.remove-existing-vector-store-table=false
## Set to 'true' to drop the table on every application startup.
## USE WITH EXTREME CAUTION! This will delete all your vector data.
## Defaults to 'false'.

# Name of the table for storing vectors
spring.ai.vectorstore.pgvector.table-name=vector_store
## The name of the table to use for storing vectors. Default is 'vector_store'.

# Schema where the vector_store table resides  
spring.ai.vectorstore.pgvector.schema-name=public
## The schema name where the vector store table resides. Default is 'public'.

# Preferred index type for similarity search (HNSW or IVFFlat)       
spring.ai.vectorstore.pgvector.index-type=HNSW
## Nearest neighbor search index type. Options:
## - NONE: Exact nearest neighbor search (full scan, slow for large datasets)
## - IVFFlat: Faster build times, less memory than HNSW, but potentially lower query performance.
## - HNSW: (Hierarchical Navigable Small World) Generally recommended for better query performance
##         (speed-recall tradeoff), but slower build times and more memory.
##         It's often the default and preferred for production.

# Similarity metric (COSINE_DISTANCE, EUCLIDEAN_DISTANCE, NEGATIVE_INNER_PRODUCT)         
spring.ai.vectorstore.pgvector.distance-type=COSINE_DISTANCE
## Search distance type. Options:
## - COSINE_DISTANCE: (Default) Measures the cosine of the angle between vectors.
## - EUCLIDEAN_DISTANCE: Standard Euclidean distance.
## - NEGATIVE_INNER_PRODUCT: Used when vectors are normalized to length 1 for performance.

# IMPORTANT: Must match the output dimension of your embedding model (e.g., text-embedding-ada-002)
spring.ai.vectorstore.pgvector.dimensions=1536
## IMPORTANT: This must match the dimension of your embedding model's output.
## For OpenAI's text-embedding-ada-002, it's 1536.
## For text-embedding-3-small, it can be 1536 or a smaller dimension (e.g., 256, 512).
## Ensure your PostgreSQL 'vector' column also uses this dimension (e.g., `embedding vector(1536)`).

# Set to 'true' for strict validation if using custom schema/table names           
spring.ai.vectorstore.pgvector.schema-validation=false
## Set to 'true' to enable schema and table name validation. Recommended for production.

# Max documents to process in one batch  
spring.ai.vectorstore.pgvector.max-document-batch-size=10000


# ############################################################################################
# --- 4. Spring AI OpenAI Embedding & Chat Configuration ---
# ############################################################################################

# OpenAI key
spring.ai.openai.api-key=${OPENAI_API_KEY}

# Enable OpenAI as the embedding client
spring.ai.openai.embedding.enabled=true
# Specify the embedding model (e.g., 1536 dimensions)
spring.ai.openai.embedding.options.model=text-embedding-3-small
# Explicitly set the dimensions for the embedding model to match the vector store's expectation
spring.ai.openai.embedding.options.dimensions=1536

## Optional: Configure model, temperature, max tokens, etc.
spring.ai.openai.chat.options.model=gpt-3.5-turbo-0125
spring.ai.openai.chat.options.temperature=0.7
spring.ai.openai.chat.options.maxTokens=200


# OpenAI: Chat Controller
spring.ai.openai.url.completions=https://api.openai.com/v1/chat/completions
spring.ai.openai.model.completions=gpt-3.5-turbo-0125

# Enable DEBUG logging for Spring AI and HTTP requests/responses
logging.level.org.springframework.ai=DEBUG
logging.level.org.springframework.web.client=DEBUG
logging.level.org.springframework.http.client=DEBUG



